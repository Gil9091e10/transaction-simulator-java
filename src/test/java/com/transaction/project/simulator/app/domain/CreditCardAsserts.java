package com.transaction.project.simulator.app.domain;

import static com.transaction.project.simulator.app.domain.AssertUtils.bigDecimalCompareTo;
import static org.assertj.core.api.Assertions.assertThat;

public class CreditCardAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertCreditCardAllPropertiesEquals(CreditCard expected, CreditCard actual) {
        assertCreditCardAutoGeneratedPropertiesEquals(expected, actual);
        assertCreditCardAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertCreditCardAllUpdatablePropertiesEquals(CreditCard expected, CreditCard actual) {
        assertCreditCardUpdatableFieldsEquals(expected, actual);
        assertCreditCardUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertCreditCardAutoGeneratedPropertiesEquals(CreditCard expected, CreditCard actual) {
        assertThat(expected)
            .as("Verify CreditCard auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertCreditCardUpdatableFieldsEquals(CreditCard expected, CreditCard actual) {
        assertThat(expected)
            .as("Verify CreditCard relevant properties")
            .satisfies(e ->
                assertThat(e.getMaxLimit()).as("check maxLimit").usingComparator(bigDecimalCompareTo).isEqualTo(actual.getMaxLimit())
            );
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertCreditCardUpdatableRelationshipsEquals(CreditCard expected, CreditCard actual) {
        // empty method
    }
}
