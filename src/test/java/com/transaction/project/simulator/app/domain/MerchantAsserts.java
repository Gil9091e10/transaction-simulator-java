package com.transaction.project.simulator.app.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class MerchantAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertMerchantAllPropertiesEquals(Merchant expected, Merchant actual) {
        assertMerchantAutoGeneratedPropertiesEquals(expected, actual);
        assertMerchantAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertMerchantAllUpdatablePropertiesEquals(Merchant expected, Merchant actual) {
        assertMerchantUpdatableFieldsEquals(expected, actual);
        assertMerchantUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertMerchantAutoGeneratedPropertiesEquals(Merchant expected, Merchant actual) {
        assertThat(expected)
            .as("Verify Merchant auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertMerchantUpdatableFieldsEquals(Merchant expected, Merchant actual) {
        assertThat(expected)
            .as("Verify Merchant relevant properties")
            .satisfies(e -> assertThat(e.getName()).as("check name").isEqualTo(actual.getName()))
            .satisfies(e -> assertThat(e.getMcc()).as("check mcc").isEqualTo(actual.getMcc()))
            .satisfies(e -> assertThat(e.getPostalCode()).as("check postalCode").isEqualTo(actual.getPostalCode()))
            .satisfies(e -> assertThat(e.getWebsite()).as("check website").isEqualTo(actual.getWebsite()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertMerchantUpdatableRelationshipsEquals(Merchant expected, Merchant actual) {
        // empty method
    }
}
